name: 'Feature deploy'

on:
  issue_comment:
    types: [created]

permissions:
  actions: read
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  feature-deploy:
    if: |
      ${{ github.event.issue.pull_request && github.event.comment.body == 'trigger: deploy' && contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) }}

    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: 'Acknowledge command with reaction'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ github.event.comment.id }}
          reactions: '+1'

      - name: 'Get PR branch name'
        id: get_branch
        uses: xt0rted/pull-request-comment-branch@v2

      - name: 'Checkout PR branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_branch.outputs.head_ref }}

      - name: 'Install pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 'Install dependencies'
        run: pnpm install

      - name: 'Build for PR Preview'
        run: |
          REPO_NAME=$(basename "$GITHUB_REPOSITORY")
          PR_NUMBER=${{ github.event.issue.number }}
          pnpm run build --base "/$REPO_NAME/pr/$PR_NUMBER/"
          cp dist/index.html dist/404.html

      - name: 'Download currently deployed site artifact'
        id: download_step
        run: pnpm exec tsx --tsconfig tsconfig.gh.json .github/scripts/download-deployed-artifact.ts
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Combine deployed site with new preview'
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          DOWNLOAD_PATH="${{ steps.download_step.outputs.download-path }}"

          echo "DEBUG: Downloaded path from previous step: '$DOWNLOAD_PATH'"

          mkdir -p ./deploy
          echo "Ensured base deploy directory ./deploy exists."

          if [[ "$DOWNLOAD_PATH" == "deployed-site.zip" ]]; then
            echo "Extracting deployed site.zip to ./deploy"
            unzip "$DOWNLOAD_PATH" -d ./deploy
            
            if [ -f "./deploy/artifact.tar" ]; then
              echo "Extracting artifact.tar from ./deploy..."
              tar -xf ./deploy/artifact.tar -C ./deploy/ # Extract contents of tar into ./deploy
              rm ./deploy/artifact.tar # Clean up the intermediate tar file
              echo "Extracted artifact.tar and cleaned up."
            else
              echo "Warning: artifact.tar not found inside deployed-site.zip. This may indicate an empty or unexpected artifact structure."
            fi
          else
            echo "No existing site (.zip) to extract. Starting with an empty deploy directory."
            rm -rf ./deploy/*
          fi

          mkdir -p "./deploy/pr/$PR_NUMBER"
          echo "Ensured preview directory ./deploy/pr/$PR_NUMBER exists."

          find "./deploy/pr/$PR_NUMBER" -mindepth 1 -delete
          echo "Cleaned up old preview content (if any) in ./deploy/pr/$PR_NUMBER."

          echo "Copying new build from ./dist to ./deploy/pr/$PR_NUMBER"
          cp -rT ./dist "./deploy/pr/$PR_NUMBER"
          echo "Successfully copied new build from ./dist to ./deploy/pr/$PR_NUMBER."
      - name: 'Upload Pages artifact'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy

      - name: 'Deploy to GitHub Pages'
        id: deployment
        uses: actions/deploy-pages@v4
